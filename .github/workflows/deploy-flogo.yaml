# This is a basic workflow to help you get started with Actions

name: DeployFlogoTIBCO_Platform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  # push:
  #   branches: [ "master" ]
  #   paths:
  #     - '**.flogo'
  # pull_request:
  #   branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tags:
        description: 'Launch build'
        required: false
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@master

      # Runs a set of commands using the runners shell
      - name: Deploy Flogo app in TIBCO Platform
        env:
          TOKEN: ${{ secrets.TOKEN }}
          BASE_URL: ${{ vars.BASE_URL }}
          FLOGO_FILE: src/customer-api.flogo
          APPLICATION_NAME: ${{ github.event.repository.name }}
          OWNER: ${{ github.actor }}
        run: |
          # Deploy app to TIBCO Platform
          #BASE_URL=$BASE_URL
          # Key:
          #TOKEN=$PLATFORM_TOKEN
          # Flogo File to Deploy
          #FLOGO_FILE=$FILE_TO_DEPLOY
          APP_NAME=${APPLICATION_NAME,,}
          #Owner to use in tags
          #OWNER=$GITHUB_USER
          
          # Testing the API
          echo "Testing Connection to $BASE_URL using token $PLATFORM_TOKEN $TOKEN..."
          BUILD_VERSION=$(curl -s -X 'GET' \
            "$BASE_URL/public/v1/dp/flogoversions" \
            -H 'accept: application/json' \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-Atmosphere-Token: $TOKEN" | jq -r  '.totalBuildtypes') 
          
          if [[ -z "$BUILD_VERSION" ]]; then echo "Not able to connect to TIBCO Platform API !" && exit 1; else echo "Connection Successful !"; fi
          
          # Create a build
          echo "Creating a build..."
          # Get the build ID
          BUILD_ID=$(curl -s -X 'POST' \
            "$BASE_URL/public/v1/dp/builds" \
            -H 'accept: application/json' \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -H "X-Atmosphere-Token: $TOKEN" \
            -F "app.json=@$FLOGO_FILE" | jq -r  '.buildId')
          echo "BuildID: $BUILD_ID "
          sleep 5
          
          # Deploy app using buildId (scale to 1)
          echo "Creating application with name $APP_NAME ..."
          output=$(curl -s -X 'POST' \
            "$BASE_URL/public/v1/dp/builds/$BUILD_ID/deploy" \
            -H 'accept: application/json' \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -H "X-Atmosphere-Token: $TOKEN" \
            -d "{\"appId\":\"\",\"buildId\":\"$BUILD_ID\",\"eula\":true,\"appName\":\"$APP_NAME\",\"tags\":[\"$OWNER\"],\"replicas\": 1,\"resourceLimits\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"125m\",\"memory\":\"256Mi\"}},\"enableServiceMesh\":false,\"enableAutoscaling\":false}")
          echo $output
          APP_ID=$(echo $output | jq -r  '.appId')
          if [[ -z "$APP_ID" ]]; then echo "Error deploying the application: \n $output" && exit 1; else echo $output; fi
          sleep 5 
          echo "Application deployed with APP ID: $APP_ID: \n$output"
          # Edit catalog-info.yaml with new appId
          echo "Edit catalog-info.yaml with new appId $APP_ID ..."
          sed -i -e "s/AppID: \([a-z0-9]*\)/AppID: $APP_ID/g" catalog-info.yaml
          echo $?
          cat catalog-info.yaml | grep appId
  # Add actions that modify files here
      - name: Check for Changes
        id: check_changes
        run: |
          if [[ -n "$(git diff --exit-code)" ]]; then
            echo "Changes detected."
            echo "::set-output name=has_changes::true"
          else
            echo "No changes detected."
            echo "::set-output name=has_changes::false"
          fi

      - name: Commit and Push Changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # configure user
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

          # stage any file changes to be committed
          git add .

          # make commit with staged changes
          git commit -m 'files changed'

          # push the commit back up to source GitHub repository
          git push
